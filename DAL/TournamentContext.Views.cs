//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(WorkDB.DAL.TournamentContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets1df34c240f2d6e34fa36b551a88b1020dc35c6eed7a035a0095484936e2dce10))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySets1df34c240f2d6e34fa36b551a88b1020dc35c6eed7a035a0095484936e2dce10 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "1df34c240f2d6e34fa36b551a88b1020dc35c6eed7a035a0095484936e2dce10"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.Avatar")
            {
                return GetView0();
            }

            if (extentName == "CodeFirstDatabase.Player")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.Enrollment")
            {
                return GetView2();
            }

            if (extentName == "CodeFirstDatabase.Tournament")
            {
                return GetView3();
            }

            if (extentName == "CodeFirstDatabase.Category")
            {
                return GetView4();
            }

            if (extentName == "CodeFirstDatabase.Question")
            {
                return GetView5();
            }

            if (extentName == "CodeFirstDatabase.Role")
            {
                return GetView6();
            }

            if (extentName == "CodeFirstDatabase.QuestionCategory")
            {
                return GetView7();
            }

            if (extentName == "TournamentContext.Avatars")
            {
                return GetView8();
            }

            if (extentName == "TournamentContext.Players")
            {
                return GetView9();
            }

            if (extentName == "TournamentContext.Enrollments")
            {
                return GetView10();
            }

            if (extentName == "TournamentContext.Tournaments")
            {
                return GetView11();
            }

            if (extentName == "TournamentContext.Categories")
            {
                return GetView12();
            }

            if (extentName == "TournamentContext.Questions")
            {
                return GetView13();
            }

            if (extentName == "TournamentContext.Roles")
            {
                return GetView14();
            }

            if (extentName == "TournamentContext.Question_Category")
            {
                return GetView15();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Avatar.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Avatar
        [CodeFirstDatabaseSchema.Avatar](T1.Avatar_Id, T1.Avatar_Name, T1.Avatar_Image)
    FROM (
        SELECT 
            T.Id AS Avatar_Id, 
            T.Name AS Avatar_Name, 
            T.Image AS Avatar_Image, 
            True AS _from0
        FROM TournamentContext.Avatars AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Player.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Player
        [CodeFirstDatabaseSchema.Player](T1.Player_ID, T1.Player_LastName, T1.Player_Firstname, T1.Player_NickName, T1.Player_Password, T1.Player_salt, T1.Player_Team, T1.Player_Score, T1.Player_AvatarId, T1.Player_RoleId)
    FROM (
        SELECT 
            T.ID AS Player_ID, 
            T.LastName AS Player_LastName, 
            T.Firstname AS Player_Firstname, 
            T.NickName AS Player_NickName, 
            T.Password AS Player_Password, 
            T.salt AS Player_salt, 
            T.Team AS Player_Team, 
            T.Score AS Player_Score, 
            T.AvatarId AS Player_AvatarId, 
            T.RoleId AS Player_RoleId, 
            True AS _from0
        FROM TournamentContext.Players AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Enrollment.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Enrollment
        [CodeFirstDatabaseSchema.Enrollment](T1.Enrollment_EnrollmentID, T1.Enrollment_TournamentID, T1.Enrollment_PlayerID, T1.Enrollment_Grade)
    FROM (
        SELECT 
            T.EnrollmentID AS Enrollment_EnrollmentID, 
            T.TournamentID AS Enrollment_TournamentID, 
            T.PlayerID AS Enrollment_PlayerID, 
            T.Grade AS Enrollment_Grade, 
            True AS _from0
        FROM TournamentContext.Enrollments AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Tournament.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Tournament
        [CodeFirstDatabaseSchema.Tournament](T1.Tournament_TournamentID, T1.Tournament_Title, T1.Tournament_Country, T1.Tournament_Post, T1.Tournament_Date, T1.Tournament_played, T1.Tournament_CategoryID)
    FROM (
        SELECT 
            T.TournamentID AS Tournament_TournamentID, 
            T.Title AS Tournament_Title, 
            T.Country AS Tournament_Country, 
            T.Post AS Tournament_Post, 
            T.Date AS Tournament_Date, 
            T.played AS Tournament_played, 
            T.CategoryID AS Tournament_CategoryID, 
            True AS _from0
        FROM TournamentContext.Tournaments AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Category.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Category
        [CodeFirstDatabaseSchema.Category](T1.Category_Id, T1.Category_Name, T1.Category_Post, T1.Category_Vocabulary)
    FROM (
        SELECT 
            T.Id AS Category_Id, 
            T.Name AS Category_Name, 
            T.Post AS Category_Post, 
            T.Vocabulary AS Category_Vocabulary, 
            True AS _from0
        FROM TournamentContext.Categories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Question.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Question
        [CodeFirstDatabaseSchema.Question](T1.Question_Id, T1.Question_CategoryID, T1.Question_Questions, T1.Question_Answer, T1.Question_Comment)
    FROM (
        SELECT 
            T.Id AS Question_Id, 
            T.CategoryID AS Question_CategoryID, 
            T.Questions AS Question_Questions, 
            T.Answer AS Question_Answer, 
            T.Comment AS Question_Comment, 
            True AS _from0
        FROM TournamentContext.Questions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Role.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Role
        [CodeFirstDatabaseSchema.Role](T1.Role_Id, T1.Role_Name)
    FROM (
        SELECT 
            T.Id AS Role_Id, 
            T.Name AS Role_Name, 
            True AS _from0
        FROM TournamentContext.Roles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.QuestionCategory.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing QuestionCategory
        [CodeFirstDatabaseSchema.QuestionCategory](T1.[QuestionCategory.Question_Id], T1.[QuestionCategory.Category_Id])
    FROM (
        SELECT 
            Key(T.Question_Category_Source).Id AS [QuestionCategory.Question_Id], 
            Key(T.Question_Category_Target).Id AS [QuestionCategory.Category_Id], 
            True AS _from0
        FROM TournamentContext.Question_Category AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for TournamentContext.Avatars.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Avatars
        [WorkDB.DAL.Avatar](T1.Avatar_Id, T1.Avatar_Name, T1.Avatar_Image)
    FROM (
        SELECT 
            T.Id AS Avatar_Id, 
            T.Name AS Avatar_Name, 
            T.Image AS Avatar_Image, 
            True AS _from0
        FROM CodeFirstDatabase.Avatar AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for TournamentContext.Players.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Players
        [WorkDB.DAL.Player](T1.Player_ID, T1.Player_LastName, T1.Player_Firstname, T1.Player_NickName, T1.Player_Password, T1.Player_salt, T1.Player_Team, T1.Player_Score, T1.Player_AvatarId, T1.Player_RoleId)
    FROM (
        SELECT 
            T.ID AS Player_ID, 
            T.LastName AS Player_LastName, 
            T.Firstname AS Player_Firstname, 
            T.NickName AS Player_NickName, 
            T.Password AS Player_Password, 
            T.salt AS Player_salt, 
            T.Team AS Player_Team, 
            T.Score AS Player_Score, 
            T.AvatarId AS Player_AvatarId, 
            T.RoleId AS Player_RoleId, 
            True AS _from0
        FROM CodeFirstDatabase.Player AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for TournamentContext.Enrollments.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Enrollments
        [WorkDB.DAL.Enrollment](T1.Enrollment_EnrollmentID, T1.Enrollment_TournamentID, T1.Enrollment_PlayerID, T1.Enrollment_Grade)
    FROM (
        SELECT 
            T.EnrollmentID AS Enrollment_EnrollmentID, 
            T.TournamentID AS Enrollment_TournamentID, 
            T.PlayerID AS Enrollment_PlayerID, 
            T.Grade AS Enrollment_Grade, 
            True AS _from0
        FROM CodeFirstDatabase.Enrollment AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for TournamentContext.Tournaments.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Tournaments
        [WorkDB.DAL.Tournament](T1.Tournament_TournamentID, T1.Tournament_Title, T1.Tournament_Country, T1.Tournament_Post, T1.Tournament_Date, T1.Tournament_played, T1.Tournament_CategoryID)
    FROM (
        SELECT 
            T.TournamentID AS Tournament_TournamentID, 
            T.Title AS Tournament_Title, 
            T.Country AS Tournament_Country, 
            T.Post AS Tournament_Post, 
            T.Date AS Tournament_Date, 
            T.played AS Tournament_played, 
            T.CategoryID AS Tournament_CategoryID, 
            True AS _from0
        FROM CodeFirstDatabase.Tournament AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for TournamentContext.Categories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Categories
        [WorkDB.DAL.Category](T1.Category_Id, T1.Category_Name, T1.Category_Post, T1.Category_Vocabulary)
    FROM (
        SELECT 
            T.Id AS Category_Id, 
            T.Name AS Category_Name, 
            T.Post AS Category_Post, 
            T.Vocabulary AS Category_Vocabulary, 
            True AS _from0
        FROM CodeFirstDatabase.Category AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for TournamentContext.Questions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Questions
        [WorkDB.DAL.Question](T1.Question_Id, T1.Question_CategoryID, T1.Question_Questions, T1.Question_Answer, T1.Question_Comment)
    FROM (
        SELECT 
            T.Id AS Question_Id, 
            T.CategoryID AS Question_CategoryID, 
            T.Questions AS Question_Questions, 
            T.Answer AS Question_Answer, 
            T.Comment AS Question_Comment, 
            True AS _from0
        FROM CodeFirstDatabase.Question AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for TournamentContext.Roles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Roles
        [WorkDB.DAL.Role](T1.Role_Id, T1.Role_Name)
    FROM (
        SELECT 
            T.Id AS Role_Id, 
            T.Name AS Role_Name, 
            True AS _from0
        FROM CodeFirstDatabase.Role AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for TournamentContext.Question_Category.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Question_Category
        [WorkDB.DAL.Question_Category](T3.[Question_Category.Question_Category_Source], T3.[Question_Category.Question_Category_Target])
    FROM (
        SELECT -- Constructing Question_Category_Source
            CreateRef(TournamentContext.Questions, row(T2.[Question_Category.Question_Category_Source.Id]), [WorkDB.DAL.Question]) AS [Question_Category.Question_Category_Source], 
            T2.[Question_Category.Question_Category_Target]
        FROM (
            SELECT -- Constructing Question_Category_Target
                T1.[Question_Category.Question_Category_Source.Id], 
                CreateRef(TournamentContext.Categories, row(T1.[Question_Category.Question_Category_Target.Id]), [WorkDB.DAL.Category]) AS [Question_Category.Question_Category_Target]
            FROM (
                SELECT 
                    T.Question_Id AS [Question_Category.Question_Category_Source.Id], 
                    T.Category_Id AS [Question_Category.Question_Category_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.QuestionCategory AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
    }
}
